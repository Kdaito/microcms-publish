name: "Publish items to MicroCMS"
description: "Publish items to MicroCMS"

inputs:
  api-key:
    required: true
    description: "API key for MicroCMS"
  service-id:
    required: true
    description: "MicroCMS service ID"
  qiita-token:
    required: true
    description: "Qiita API token"

runs:
  using: "composite"
  steps:
    # 変更されたファイルを検知する
    - name: "Find modified Markdown files"
      id: changed-files
      shell: bash
      run: |
        echo "Detecting changed .md files..."
        CHANGED_FILES=$(git diff --name-only HEAD^ | grep '^public/.*\.md$' || echo "")
        CHANGED_FILES_ARRAY=$(echo "$CHANGED_FILES" | paste -sd "," -)
        echo "CHANGED_FILES=$CHANGED_FILES_ARRAY" >> $GITHUB_ENV
    
    - uses: increments/qiita-cli/actions/publish@v1
      with:
        qiita-token: ${{ inputs.qiita-token }}
        root: "."

    - name: "Set up Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: "22.13.0"

    - name: "Install marked"
      run: npm install -g marked
      shell: bash

    # 変更されたファイルを処理して MicroCMS に投稿する
    - name: "Process and publish items"
      if: env.CHANGED_FILES != ''
      shell: bash
      run: |
        IFS=',' read -ra FILES <<< "$CHANGED_FILES"

        for file in "${FILES[@]}"; do
          echo "Processing $file..."

          # Extract metadata using yq
          TITLE=$(yq --front-matter=extract '.title' "$file")
          TAGS=$(yq --front-matter=extract '.tags | join(",")' "$file")
          QIITA_ID=$(yq --front-matter=extract '.id' "$file")
          CONTENT=$(tail -n +2 $file | awk '/^---$/ {i++} i>=1' | tail -n +2)
          PARSED_CONTENT=$( marked -s "$CONTENT" --gfm --breaks)
          JSON_CONTENT=$(jq -n --arg title "$TITLE" --arg tags "$TAGS" --arg qiitaId "$QIITA_ID" --arg content "$PARSED_CONTENT" '{title: $title, tags: $tags, qiitaId: $qiitaId, content: $content}')

          # Skip if required fields are missing
          if [[ -z "$TITLE" || -z "$QIITA_ID" ]]; then
            echo "Skipping $file: Missing required fields"
            continue
          fi

          ENCODED_FILTERS=$(echo "qiitaId[equals]$QIITA_ID" | jq -Rr @uri)

          # Check if article exists in MicroCMS and get content ID
          curl -s -o response.json \
            "https://${{ inputs.service-id }}.microcms.io/api/v1/items?filters=$ENCODED_FILTERS" \
            -H "X-MICROCMS-API-KEY: ${{ inputs.api-key }}"

          TOTAL_COUNT=$(jq '.totalCount' response.json)

          if [[ "$TOTAL_COUNT" == 1 ]]; then
            # Get content ID from response
            CONTENT_ID=$(jq -r '.contents[0].id' response.json)
            METHOD="PATCH"
            URL="https://${{ inputs.service-id }}.microcms.io/api/v1/items/$CONTENT_ID"
          else
            METHOD="POST"
            URL="https://${{ inputs.service-id }}.microcms.io/api/v1/items"
          fi

          # Publish article to MicroCMS
          curl -s -X $METHOD "$URL" \
            -H "X-MICROCMS-API-KEY: ${{ inputs.api-key }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_CONTENT"

          echo "Published: $file"
        done